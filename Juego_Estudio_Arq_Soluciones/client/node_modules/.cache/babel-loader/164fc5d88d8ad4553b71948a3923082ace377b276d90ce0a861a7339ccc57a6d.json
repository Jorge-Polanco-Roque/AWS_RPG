{"ast":null,"code":"import React,{createContext,useContext,useState,useCallback,useEffect}from'react';import axios from'axios';import toast from'react-hot-toast';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext();export const useGame=()=>{const context=useContext(GameContext);if(!context){throw new Error('useGame must be used within a GameProvider');}return context;};export const GameProvider=_ref=>{let{children}=_ref;const{updateUserStats,user,isAuthenticated}=useAuth();const[currentSession,setCurrentSession]=useState(null);const[currentQuestion,setCurrentQuestion]=useState(null);const[gameState,setGameState]=useState('idle');// idle, playing, paused, ended\nconst[questionHistory,setQuestionHistory]=useState([]);const[timeRemaining,setTimeRemaining]=useState(null);const[loading,setLoading]=useState(false);const[playerProgress,setPlayerProgress]=useState(null);// Development mode for testing\nconst isLocalhost=window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1';const testModeEnabled=localStorage.getItem('test_mode_enabled')==='true';const getGameStats=useCallback(()=>{if(!currentSession)return null;const accuracy=currentSession.questionsAnswered>0?(currentSession.correctAnswers/currentSession.questionsAnswered*100).toFixed(1):0;return{questionsAnswered:currentSession.questionsAnswered,correctAnswers:currentSession.correctAnswers,accuracy,duration:currentSession.duration,domain:currentSession.domain};},[currentSession]);// Save progress to backend\nconst saveProgress=useCallback(async function(){let progressData=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};// Skip saving in test mode\nif(isLocalhost&&testModeEnabled){console.log('Test mode: Skipping save to backend');return{success:true};}try{const gameStats=getGameStats();const dataToSave={level:progressData.level||1,experience:progressData.experience||0,totalScore:progressData.totalScore||0,maxCombo:progressData.maxCombo||0,gamesPlayed:(progressData.gamesPlayed||0)+1,totalQuestions:(gameStats===null||gameStats===void 0?void 0:gameStats.questionsAnswered)||0,correctAnswers:(gameStats===null||gameStats===void 0?void 0:gameStats.correctAnswers)||0,levelsCompleted:progressData.levelsCompleted||[],achievements:progressData.achievements||[],specialAbilities:progressData.specialAbilities||{fireball:{unlocked:true,level:1},heal:{unlocked:true,level:1},shield:{unlocked:false,level:0}},inventory:progressData.inventory||[],settings:progressData.settings||{sound:true,music:true,difficulty:'normal'},...progressData};const response=await axios.post('/api/game/save-progress',dataToSave);if(response.data.success){toast.success('Progress saved to neural cloud!',{icon:'💾',duration:2000});return{success:true};}else{throw new Error(response.data.error||'Save failed');}}catch(error){console.error('Save progress error:',error);toast.error('Failed to save progress to neural cloud',{icon:'⚠️',duration:3000});return{success:false,error:error.message};}},[isLocalhost,testModeEnabled,getGameStats]);// Load progress from backend\nconst loadProgress=useCallback(async()=>{// Skip loading in test mode\nif(isLocalhost&&testModeEnabled){console.log('Test mode: Using local progress');return{success:true,progress:{level:1,experience:0,totalScore:0,maxCombo:0,gamesPlayed:0,totalQuestions:0,correctAnswers:0,levelsCompleted:[],achievements:[],specialAbilities:{fireball:{unlocked:true,level:1},heal:{unlocked:true,level:1},shield:{unlocked:false,level:0}},inventory:[],settings:{sound:true,music:true,difficulty:'normal'}}};}try{const response=await axios.get('/api/game/load-progress');if(response.data.success){toast.success('Progress loaded from neural cloud!',{icon:'📥',duration:2000});return{success:true,progress:response.data.progress};}else{throw new Error(response.data.error||'Load failed');}}catch(error){var _error$response;console.error('Load progress error:',error);// If it's a 404, it means no progress exists yet\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===404){return{success:true,progress:{level:1,experience:0,totalScore:0,maxCombo:0,gamesPlayed:0,totalQuestions:0,correctAnswers:0,levelsCompleted:[],achievements:[],specialAbilities:{fireball:{unlocked:true,level:1},heal:{unlocked:true,level:1},shield:{unlocked:false,level:0}},inventory:[],settings:{sound:true,music:true,difficulty:'normal'}}};}toast.error('Failed to load progress from neural cloud',{icon:'⚠️',duration:3000});return{success:false,error:error.message};}},[isLocalhost,testModeEnabled]);// Load player progress when user authenticates\nuseEffect(()=>{const loadUserProgress=async()=>{if(isAuthenticated&&user&&!playerProgress){console.log('Loading user progress for:',user.username);const result=await loadProgress();if(result.success){setPlayerProgress(result.progress);}}};loadUserProgress();},[isAuthenticated,user,playerProgress,loadProgress]);// Mock questions for testing\nconst mockQuestions=[{id:'test-q1',question:'What is the primary benefit of using AWS Lambda?',options:['Serverless computing with automatic scaling','Fixed server capacity','Manual server management','Physical server access'],correctAnswer:0,explanation:'AWS Lambda provides serverless computing with automatic scaling, eliminating the need for server management.',cyberpunkContext:{aiName:'LAMBDA-CORE',aiEmoji:'⚡',description:'Serverless Processing Entity',neuralPrompt:'The Lambda-Core entity pulses with raw computational power, its serverless tendrils reaching across the digital void...'}},{id:'test-q2',question:'Which AWS service is best for storing static web content?',options:['EC2','S3','RDS','Lambda'],correctAnswer:1,explanation:'Amazon S3 is designed for storing and retrieving any amount of data, making it perfect for static web content.',cyberpunkContext:{aiName:'S3-VAULT',aiEmoji:'🗄️',description:'Data Storage Nexus',neuralPrompt:'The S3-Vault materializes from the data streams, its infinite storage capacity echoing through cyberspace...'}}];const startGameSession=async function(){let domain=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';try{setLoading(true);// Use mock data in test mode\nif(isLocalhost&&testModeEnabled){const mockSessionId='test-session-'+Date.now();setCurrentSession({id:mockSessionId,domain,questionsAnswered:0,correctAnswers:0,startTime:new Date()});setGameState('playing');setQuestionHistory([]);toast.success('Neural interface activated! Test mode enabled.',{icon:'🤖',duration:4000});// Fetch first question\nawait fetchNextQuestion(mockSessionId);return{success:true,sessionId:mockSessionId};}const response=await axios.post('/api/game/start-session',{domain});if(response.data.success){setCurrentSession({id:response.data.sessionId,domain,questionsAnswered:0,correctAnswers:0,startTime:new Date()});setGameState('playing');setQuestionHistory([]);toast.success(response.data.message,{icon:'🌌',duration:4000});// Fetch first question\nawait fetchNextQuestion(response.data.sessionId);return{success:true,sessionId:response.data.sessionId};}}catch(error){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to start game session';toast.error(`The ritual failed to begin: ${message}`,{icon:'💀',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const fetchNextQuestion=async function(sessionId){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{setLoading(true);// Use mock data in test mode\nif(isLocalhost&&testModeEnabled){const currentQuestionIndex=questionHistory.length;const question=mockQuestions[currentQuestionIndex%mockQuestions.length];setCurrentQuestion({...question,startTime:new Date()});// Set timer for question (2 minutes per question like real exam)\nsetTimeRemaining(120);return{success:true,question};}const params=new URLSearchParams(filters).toString();const response=await axios.get(`/api/game/question/${sessionId}?${params}`);if(response.data.success){setCurrentQuestion({...response.data.question,cosmicContext:response.data.cosmicContext,startTime:new Date()});// Set timer for question (2 minutes per question like real exam)\nsetTimeRemaining(120);return{success:true,question:response.data.question};}}catch(error){var _error$response3,_error$response3$data;const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to fetch question';toast.error(`The cosmic knowledge eludes us: ${message}`,{icon:'🌀',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const submitAnswer=async selectedAnswer=>{if(!currentSession||!currentQuestion)return;try{setLoading(true);const timeTaken=Math.floor((new Date()-currentQuestion.startTime)/1000);// Use mock data in test mode\nif(isLocalhost&&testModeEnabled){const correct=selectedAnswer===currentQuestion.correctAnswer;const result={questionId:currentQuestion.id,question:currentQuestion.question,selectedAnswer,correct,explanation:currentQuestion.explanation,timeTaken,aiResponse:correct?'Excellent! Your neural pathways are functioning optimally.':'Incorrect. Recalibrating neural matrix...'};// Update question history\nsetQuestionHistory(prev=>[...prev,result]);// Update session stats\nsetCurrentSession(prev=>({...prev,questionsAnswered:prev.questionsAnswered+1,correctAnswers:prev.correctAnswers+(correct?1:0)}));// Show response\nconst toastType=correct?'success':'error';const toastIcon=correct?'✨':'💀';toast[toastType](result.aiResponse,{icon:toastIcon,duration:4000});return{success:true,result};}const response=await axios.post('/api/game/answer',{sessionId:currentSession.id,questionId:currentQuestion.id,selectedAnswer,timeTaken});if(response.data.success){const result={questionId:currentQuestion.id,question:currentQuestion.question,selectedAnswer,correct:response.data.correct,explanation:response.data.explanation,timeTaken,cosmicResponse:response.data.cosmicResponse};// Update question history\nsetQuestionHistory(prev=>[...prev,result]);// Update session stats\nsetCurrentSession(prev=>({...prev,questionsAnswered:prev.questionsAnswered+1,correctAnswers:prev.correctAnswers+(response.data.correct?1:0)}));// Update user stats\nupdateUserStats({sanityLevel:prev=>prev+response.data.sanityChange,knowledgeShards:prev=>prev+response.data.shardsChange});// Show cosmic response\nconst toastType=response.data.correct?'success':'error';const toastIcon=response.data.correct?'✨':'💀';toast[toastType](response.data.cosmicResponse,{icon:toastIcon,duration:4000});return{success:true,result};}}catch(error){var _error$response4,_error$response4$data;const message=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Failed to submit answer';toast.error(`The cosmic judgment failed: ${message}`,{icon:'💀',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const endGameSession=useCallback(async()=>{if(currentSession){const endTime=new Date();const duration=Math.floor((endTime-currentSession.startTime)/1000);setCurrentSession(prev=>({...prev,endTime,duration}));setGameState('ended');setCurrentQuestion(null);setTimeRemaining(null);const accuracy=currentSession.questionsAnswered>0?(currentSession.correctAnswers/currentSession.questionsAnswered*100).toFixed(1):0;// Calculate experience and score\nconst experienceGained=currentSession.correctAnswers*10;const scoreGained=Math.floor(currentSession.correctAnswers*100*(accuracy/100));// Update player progress\nif(playerProgress){const updatedProgress={...playerProgress,experience:playerProgress.experience+experienceGained,totalScore:playerProgress.totalScore+scoreGained,gamesPlayed:playerProgress.gamesPlayed+1,totalQuestions:playerProgress.totalQuestions+currentSession.questionsAnswered,correctAnswers:playerProgress.correctAnswers+currentSession.correctAnswers};setPlayerProgress(updatedProgress);// Save to backend\nawait saveProgress(updatedProgress);}toast.success(`Training session complete! Accuracy: ${accuracy}%`,{icon:'🌟',duration:5000});if(experienceGained>0){toast.success(`+${experienceGained} Neural Experience`,{icon:'⚡',duration:3000});}}},[currentSession,playerProgress,saveProgress]);const pauseGame=()=>{setGameState('paused');};const resumeGame=()=>{setGameState('playing');};const resetGame=()=>{setCurrentSession(null);setCurrentQuestion(null);setGameState('idle');setQuestionHistory([]);setTimeRemaining(null);};const value={currentSession,currentQuestion,gameState,questionHistory,timeRemaining,loading,playerProgress,startGameSession,fetchNextQuestion,submitAnswer,endGameSession,pauseGame,resumeGame,resetGame,getGameStats,setTimeRemaining,saveProgress,loadProgress};return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","axios","toast","useAuth","jsx","_jsx","GameContext","useGame","context","Error","GameProvider","_ref","children","updateUserStats","user","isAuthenticated","currentSession","setCurrentSession","currentQuestion","setCurrentQuestion","gameState","setGameState","questionHistory","setQuestionHistory","timeRemaining","setTimeRemaining","loading","setLoading","playerProgress","setPlayerProgress","isLocalhost","window","location","hostname","testModeEnabled","localStorage","getItem","getGameStats","accuracy","questionsAnswered","correctAnswers","toFixed","duration","domain","saveProgress","progressData","arguments","length","undefined","console","log","success","gameStats","dataToSave","level","experience","totalScore","maxCombo","gamesPlayed","totalQuestions","levelsCompleted","achievements","specialAbilities","fireball","unlocked","heal","shield","inventory","settings","sound","music","difficulty","response","post","data","icon","error","message","loadProgress","progress","get","_error$response","status","loadUserProgress","username","result","mockQuestions","id","question","options","correctAnswer","explanation","cyberpunkContext","aiName","aiEmoji","description","neuralPrompt","startGameSession","mockSessionId","Date","now","startTime","fetchNextQuestion","sessionId","_error$response2","_error$response2$data","filters","currentQuestionIndex","params","URLSearchParams","toString","cosmicContext","_error$response3","_error$response3$data","submitAnswer","selectedAnswer","timeTaken","Math","floor","correct","questionId","aiResponse","prev","toastType","toastIcon","cosmicResponse","sanityLevel","sanityChange","knowledgeShards","shardsChange","_error$response4","_error$response4$data","endGameSession","endTime","experienceGained","scoreGained","updatedProgress","pauseGame","resumeGame","resetGame","value","Provider"],"sources":["/Users/A1064331/Desktop/AWS/Claude/Juego_Estudio_Arq_Soluciones/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\n\nconst GameContext = createContext();\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport const GameProvider = ({ children }) => {\n  const { updateUserStats, user, isAuthenticated } = useAuth();\n  const [currentSession, setCurrentSession] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gameState, setGameState] = useState('idle'); // idle, playing, paused, ended\n  const [questionHistory, setQuestionHistory] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [playerProgress, setPlayerProgress] = useState(null);\n  \n  // Development mode for testing\n  const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n  const testModeEnabled = localStorage.getItem('test_mode_enabled') === 'true';\n\n  const getGameStats = useCallback(() => {\n    if (!currentSession) return null;\n    \n    const accuracy = currentSession.questionsAnswered > 0 \n      ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n      : 0;\n    \n    return {\n      questionsAnswered: currentSession.questionsAnswered,\n      correctAnswers: currentSession.correctAnswers,\n      accuracy,\n      duration: currentSession.duration,\n      domain: currentSession.domain,\n    };\n  }, [currentSession]);\n\n  // Save progress to backend\n  const saveProgress = useCallback(async (progressData = {}) => {\n    // Skip saving in test mode\n    if (isLocalhost && testModeEnabled) {\n      console.log('Test mode: Skipping save to backend');\n      return { success: true };\n    }\n\n    try {\n      const gameStats = getGameStats();\n      const dataToSave = {\n        level: progressData.level || 1,\n        experience: progressData.experience || 0,\n        totalScore: progressData.totalScore || 0,\n        maxCombo: progressData.maxCombo || 0,\n        gamesPlayed: (progressData.gamesPlayed || 0) + 1,\n        totalQuestions: gameStats?.questionsAnswered || 0,\n        correctAnswers: gameStats?.correctAnswers || 0,\n        levelsCompleted: progressData.levelsCompleted || [],\n        achievements: progressData.achievements || [],\n        specialAbilities: progressData.specialAbilities || {\n          fireball: { unlocked: true, level: 1 },\n          heal: { unlocked: true, level: 1 },\n          shield: { unlocked: false, level: 0 }\n        },\n        inventory: progressData.inventory || [],\n        settings: progressData.settings || { sound: true, music: true, difficulty: 'normal' },\n        ...progressData\n      };\n\n      const response = await axios.post('/api/game/save-progress', dataToSave);\n      \n      if (response.data.success) {\n        toast.success('Progress saved to neural cloud!', {\n          icon: '💾',\n          duration: 2000,\n        });\n        return { success: true };\n      } else {\n        throw new Error(response.data.error || 'Save failed');\n      }\n    } catch (error) {\n      console.error('Save progress error:', error);\n      toast.error('Failed to save progress to neural cloud', {\n        icon: '⚠️',\n        duration: 3000,\n      });\n      return { success: false, error: error.message };\n    }\n  }, [isLocalhost, testModeEnabled, getGameStats]);\n\n  // Load progress from backend\n  const loadProgress = useCallback(async () => {\n    // Skip loading in test mode\n    if (isLocalhost && testModeEnabled) {\n      console.log('Test mode: Using local progress');\n      return {\n        success: true,\n        progress: {\n          level: 1,\n          experience: 0,\n          totalScore: 0,\n          maxCombo: 0,\n          gamesPlayed: 0,\n          totalQuestions: 0,\n          correctAnswers: 0,\n          levelsCompleted: [],\n          achievements: [],\n          specialAbilities: {\n            fireball: { unlocked: true, level: 1 },\n            heal: { unlocked: true, level: 1 },\n            shield: { unlocked: false, level: 0 }\n          },\n          inventory: [],\n          settings: { sound: true, music: true, difficulty: 'normal' }\n        }\n      };\n    }\n\n    try {\n      const response = await axios.get('/api/game/load-progress');\n      \n      if (response.data.success) {\n        toast.success('Progress loaded from neural cloud!', {\n          icon: '📥',\n          duration: 2000,\n        });\n        return { success: true, progress: response.data.progress };\n      } else {\n        throw new Error(response.data.error || 'Load failed');\n      }\n    } catch (error) {\n      console.error('Load progress error:', error);\n      // If it's a 404, it means no progress exists yet\n      if (error.response?.status === 404) {\n        return {\n          success: true,\n          progress: {\n            level: 1,\n            experience: 0,\n            totalScore: 0,\n            maxCombo: 0,\n            gamesPlayed: 0,\n            totalQuestions: 0,\n            correctAnswers: 0,\n            levelsCompleted: [],\n            achievements: [],\n            specialAbilities: {\n              fireball: { unlocked: true, level: 1 },\n              heal: { unlocked: true, level: 1 },\n              shield: { unlocked: false, level: 0 }\n            },\n            inventory: [],\n            settings: { sound: true, music: true, difficulty: 'normal' }\n          }\n        };\n      }\n      toast.error('Failed to load progress from neural cloud', {\n        icon: '⚠️',\n        duration: 3000,\n      });\n      return { success: false, error: error.message };\n    }\n  }, [isLocalhost, testModeEnabled]);\n\n  // Load player progress when user authenticates\n  useEffect(() => {\n    const loadUserProgress = async () => {\n      if (isAuthenticated && user && !playerProgress) {\n        console.log('Loading user progress for:', user.username);\n        const result = await loadProgress();\n        if (result.success) {\n          setPlayerProgress(result.progress);\n        }\n      }\n    };\n\n    loadUserProgress();\n  }, [isAuthenticated, user, playerProgress, loadProgress]);\n  \n  // Mock questions for testing\n  const mockQuestions = [\n    {\n      id: 'test-q1',\n      question: 'What is the primary benefit of using AWS Lambda?',\n      options: [\n        'Serverless computing with automatic scaling',\n        'Fixed server capacity',\n        'Manual server management',\n        'Physical server access'\n      ],\n      correctAnswer: 0,\n      explanation: 'AWS Lambda provides serverless computing with automatic scaling, eliminating the need for server management.',\n      cyberpunkContext: {\n        aiName: 'LAMBDA-CORE',\n        aiEmoji: '⚡',\n        description: 'Serverless Processing Entity',\n        neuralPrompt: 'The Lambda-Core entity pulses with raw computational power, its serverless tendrils reaching across the digital void...'\n      }\n    },\n    {\n      id: 'test-q2',\n      question: 'Which AWS service is best for storing static web content?',\n      options: [\n        'EC2',\n        'S3',\n        'RDS',\n        'Lambda'\n      ],\n      correctAnswer: 1,\n      explanation: 'Amazon S3 is designed for storing and retrieving any amount of data, making it perfect for static web content.',\n      cyberpunkContext: {\n        aiName: 'S3-VAULT',\n        aiEmoji: '🗄️',\n        description: 'Data Storage Nexus',\n        neuralPrompt: 'The S3-Vault materializes from the data streams, its infinite storage capacity echoing through cyberspace...'\n      }\n    }\n  ];\n\n  const startGameSession = async (domain = 'all') => {\n    try {\n      setLoading(true);\n      \n      // Use mock data in test mode\n      if (isLocalhost && testModeEnabled) {\n        const mockSessionId = 'test-session-' + Date.now();\n        setCurrentSession({\n          id: mockSessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date(),\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        \n        toast.success('Neural interface activated! Test mode enabled.', {\n          icon: '🤖',\n          duration: 4000,\n        });\n        \n        // Fetch first question\n        await fetchNextQuestion(mockSessionId);\n        \n        return { success: true, sessionId: mockSessionId };\n      }\n      \n      const response = await axios.post('/api/game/start-session', { domain });\n      \n      if (response.data.success) {\n        setCurrentSession({\n          id: response.data.sessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date(),\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        \n        toast.success(response.data.message, {\n          icon: '🌌',\n          duration: 4000,\n        });\n        \n        // Fetch first question\n        await fetchNextQuestion(response.data.sessionId);\n        \n        return { success: true, sessionId: response.data.sessionId };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to start game session';\n      toast.error(`The ritual failed to begin: ${message}`, {\n        icon: '💀',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchNextQuestion = async (sessionId, filters = {}) => {\n    try {\n      setLoading(true);\n      \n      // Use mock data in test mode\n      if (isLocalhost && testModeEnabled) {\n        const currentQuestionIndex = questionHistory.length;\n        const question = mockQuestions[currentQuestionIndex % mockQuestions.length];\n        \n        setCurrentQuestion({\n          ...question,\n          startTime: new Date(),\n        });\n        \n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        \n        return { success: true, question };\n      }\n      \n      const params = new URLSearchParams(filters).toString();\n      const response = await axios.get(`/api/game/question/${sessionId}?${params}`);\n      \n      if (response.data.success) {\n        setCurrentQuestion({\n          ...response.data.question,\n          cosmicContext: response.data.cosmicContext,\n          startTime: new Date(),\n        });\n        \n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        \n        return { success: true, question: response.data.question };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to fetch question';\n      toast.error(`The cosmic knowledge eludes us: ${message}`, {\n        icon: '🌀',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitAnswer = async (selectedAnswer) => {\n    if (!currentSession || !currentQuestion) return;\n    \n    try {\n      setLoading(true);\n      const timeTaken = Math.floor((new Date() - currentQuestion.startTime) / 1000);\n      \n      // Use mock data in test mode\n      if (isLocalhost && testModeEnabled) {\n        const correct = selectedAnswer === currentQuestion.correctAnswer;\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct,\n          explanation: currentQuestion.explanation,\n          timeTaken,\n          aiResponse: correct ? 'Excellent! Your neural pathways are functioning optimally.' : 'Incorrect. Recalibrating neural matrix...',\n        };\n        \n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n        \n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (correct ? 1 : 0),\n        }));\n        \n        // Show response\n        const toastType = correct ? 'success' : 'error';\n        const toastIcon = correct ? '✨' : '💀';\n        \n        toast[toastType](result.aiResponse, {\n          icon: toastIcon,\n          duration: 4000,\n        });\n        \n        return { success: true, result };\n      }\n      \n      const response = await axios.post('/api/game/answer', {\n        sessionId: currentSession.id,\n        questionId: currentQuestion.id,\n        selectedAnswer,\n        timeTaken,\n      });\n      \n      if (response.data.success) {\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct: response.data.correct,\n          explanation: response.data.explanation,\n          timeTaken,\n          cosmicResponse: response.data.cosmicResponse,\n        };\n        \n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n        \n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (response.data.correct ? 1 : 0),\n        }));\n        \n        // Update user stats\n        updateUserStats({\n          sanityLevel: (prev) => prev + response.data.sanityChange,\n          knowledgeShards: (prev) => prev + response.data.shardsChange,\n        });\n        \n        // Show cosmic response\n        const toastType = response.data.correct ? 'success' : 'error';\n        const toastIcon = response.data.correct ? '✨' : '💀';\n        \n        toast[toastType](response.data.cosmicResponse, {\n          icon: toastIcon,\n          duration: 4000,\n        });\n        \n        return { success: true, result };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to submit answer';\n      toast.error(`The cosmic judgment failed: ${message}`, {\n        icon: '💀',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const endGameSession = useCallback(async () => {\n    if (currentSession) {\n      const endTime = new Date();\n      const duration = Math.floor((endTime - currentSession.startTime) / 1000);\n      \n      setCurrentSession(prev => ({\n        ...prev,\n        endTime,\n        duration,\n      }));\n      \n      setGameState('ended');\n      setCurrentQuestion(null);\n      setTimeRemaining(null);\n      \n      const accuracy = currentSession.questionsAnswered > 0 \n        ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n        : 0;\n\n      // Calculate experience and score\n      const experienceGained = currentSession.correctAnswers * 10;\n      const scoreGained = Math.floor(currentSession.correctAnswers * 100 * (accuracy / 100));\n      \n      // Update player progress\n      if (playerProgress) {\n        const updatedProgress = {\n          ...playerProgress,\n          experience: playerProgress.experience + experienceGained,\n          totalScore: playerProgress.totalScore + scoreGained,\n          gamesPlayed: playerProgress.gamesPlayed + 1,\n          totalQuestions: playerProgress.totalQuestions + currentSession.questionsAnswered,\n          correctAnswers: playerProgress.correctAnswers + currentSession.correctAnswers,\n        };\n        \n        setPlayerProgress(updatedProgress);\n        \n        // Save to backend\n        await saveProgress(updatedProgress);\n      }\n      \n      toast.success(`Training session complete! Accuracy: ${accuracy}%`, {\n        icon: '🌟',\n        duration: 5000,\n      });\n\n      if (experienceGained > 0) {\n        toast.success(`+${experienceGained} Neural Experience`, {\n          icon: '⚡',\n          duration: 3000,\n        });\n      }\n    }\n  }, [currentSession, playerProgress, saveProgress]);\n\n  const pauseGame = () => {\n    setGameState('paused');\n  };\n\n  const resumeGame = () => {\n    setGameState('playing');\n  };\n\n  const resetGame = () => {\n    setCurrentSession(null);\n    setCurrentQuestion(null);\n    setGameState('idle');\n    setQuestionHistory([]);\n    setTimeRemaining(null);\n  };\n\n\n\n  const value = {\n    currentSession,\n    currentQuestion,\n    gameState,\n    questionHistory,\n    timeRemaining,\n    loading,\n    playerProgress,\n    startGameSession,\n    fetchNextQuestion,\n    submitAnswer,\n    endGameSession,\n    pauseGame,\n    resumeGame,\n    resetGame,\n    getGameStats,\n    setTimeRemaining,\n    saveProgress,\n    loadProgress,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,WAAW,CAAEC,SAAS,KAAQ,OAAO,CAC1F,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,KAAK,KAAM,iBAAiB,CACnC,OAASC,OAAO,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,KAAM,CAAAC,WAAW,cAAGV,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAW,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGX,UAAU,CAACS,WAAW,CAAC,CACvC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAAEE,eAAe,CAAEC,IAAI,CAAEC,eAAgB,CAAC,CAAGZ,OAAO,CAAC,CAAC,CAC5D,KAAM,CAACa,cAAc,CAAEC,iBAAiB,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACoB,eAAe,CAAEC,kBAAkB,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAC5D,KAAM,CAACsB,SAAS,CAAEC,YAAY,CAAC,CAAGvB,QAAQ,CAAC,MAAM,CAAC,CAAE;AACpD,KAAM,CAACwB,eAAe,CAAEC,kBAAkB,CAAC,CAAGzB,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAAC0B,aAAa,CAAEC,gBAAgB,CAAC,CAAG3B,QAAQ,CAAC,IAAI,CAAC,CACxD,KAAM,CAAC4B,OAAO,CAAEC,UAAU,CAAC,CAAG7B,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAAC8B,cAAc,CAAEC,iBAAiB,CAAC,CAAG/B,QAAQ,CAAC,IAAI,CAAC,CAE1D;AACA,KAAM,CAAAgC,WAAW,CAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,WAAW,EAAIF,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,WAAW,CACxG,KAAM,CAAAC,eAAe,CAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,GAAK,MAAM,CAE5E,KAAM,CAAAC,YAAY,CAAGtC,WAAW,CAAC,IAAM,CACrC,GAAI,CAACiB,cAAc,CAAE,MAAO,KAAI,CAEhC,KAAM,CAAAsB,QAAQ,CAAGtB,cAAc,CAACuB,iBAAiB,CAAG,CAAC,CACjD,CAACvB,cAAc,CAACwB,cAAc,CAAGxB,cAAc,CAACuB,iBAAiB,CAAG,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC,CACnF,CAAC,CAEL,MAAO,CACLF,iBAAiB,CAAEvB,cAAc,CAACuB,iBAAiB,CACnDC,cAAc,CAAExB,cAAc,CAACwB,cAAc,CAC7CF,QAAQ,CACRI,QAAQ,CAAE1B,cAAc,CAAC0B,QAAQ,CACjCC,MAAM,CAAE3B,cAAc,CAAC2B,MACzB,CAAC,CACH,CAAC,CAAE,CAAC3B,cAAc,CAAC,CAAC,CAEpB;AACA,KAAM,CAAA4B,YAAY,CAAG7C,WAAW,CAAC,gBAA6B,IAAtB,CAAA8C,YAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACvD;AACA,GAAIhB,WAAW,EAAII,eAAe,CAAE,CAClCe,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClD,MAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CAC1B,CAEA,GAAI,CACF,KAAM,CAAAC,SAAS,CAAGf,YAAY,CAAC,CAAC,CAChC,KAAM,CAAAgB,UAAU,CAAG,CACjBC,KAAK,CAAET,YAAY,CAACS,KAAK,EAAI,CAAC,CAC9BC,UAAU,CAAEV,YAAY,CAACU,UAAU,EAAI,CAAC,CACxCC,UAAU,CAAEX,YAAY,CAACW,UAAU,EAAI,CAAC,CACxCC,QAAQ,CAAEZ,YAAY,CAACY,QAAQ,EAAI,CAAC,CACpCC,WAAW,CAAE,CAACb,YAAY,CAACa,WAAW,EAAI,CAAC,EAAI,CAAC,CAChDC,cAAc,CAAE,CAAAP,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEb,iBAAiB,GAAI,CAAC,CACjDC,cAAc,CAAE,CAAAY,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEZ,cAAc,GAAI,CAAC,CAC9CoB,eAAe,CAAEf,YAAY,CAACe,eAAe,EAAI,EAAE,CACnDC,YAAY,CAAEhB,YAAY,CAACgB,YAAY,EAAI,EAAE,CAC7CC,gBAAgB,CAAEjB,YAAY,CAACiB,gBAAgB,EAAI,CACjDC,QAAQ,CAAE,CAAEC,QAAQ,CAAE,IAAI,CAAEV,KAAK,CAAE,CAAE,CAAC,CACtCW,IAAI,CAAE,CAAED,QAAQ,CAAE,IAAI,CAAEV,KAAK,CAAE,CAAE,CAAC,CAClCY,MAAM,CAAE,CAAEF,QAAQ,CAAE,KAAK,CAAEV,KAAK,CAAE,CAAE,CACtC,CAAC,CACDa,SAAS,CAAEtB,YAAY,CAACsB,SAAS,EAAI,EAAE,CACvCC,QAAQ,CAAEvB,YAAY,CAACuB,QAAQ,EAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,UAAU,CAAE,QAAS,CAAC,CACrF,GAAG1B,YACL,CAAC,CAED,KAAM,CAAA2B,QAAQ,CAAG,KAAM,CAAAvE,KAAK,CAACwE,IAAI,CAAC,yBAAyB,CAAEpB,UAAU,CAAC,CAExE,GAAImB,QAAQ,CAACE,IAAI,CAACvB,OAAO,CAAE,CACzBjD,KAAK,CAACiD,OAAO,CAAC,iCAAiC,CAAE,CAC/CwB,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAC,IAAM,CACL,KAAM,IAAI,CAAA1C,KAAK,CAAC+D,QAAQ,CAACE,IAAI,CAACE,KAAK,EAAI,aAAa,CAAC,CACvD,CACF,CAAE,MAAOA,KAAK,CAAE,CACd3B,OAAO,CAAC2B,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C1E,KAAK,CAAC0E,KAAK,CAAC,yCAAyC,CAAE,CACrDD,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,KAAK,CAAEyB,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAAE,CAAC/C,WAAW,CAAEI,eAAe,CAAEG,YAAY,CAAC,CAAC,CAEhD;AACA,KAAM,CAAAyC,YAAY,CAAG/E,WAAW,CAAC,SAAY,CAC3C;AACA,GAAI+B,WAAW,EAAII,eAAe,CAAE,CAClCe,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9C,MAAO,CACLC,OAAO,CAAE,IAAI,CACb4B,QAAQ,CAAE,CACRzB,KAAK,CAAE,CAAC,CACRC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,QAAQ,CAAE,CAAC,CACXC,WAAW,CAAE,CAAC,CACdC,cAAc,CAAE,CAAC,CACjBnB,cAAc,CAAE,CAAC,CACjBoB,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,gBAAgB,CAAE,CAChBC,QAAQ,CAAE,CAAEC,QAAQ,CAAE,IAAI,CAAEV,KAAK,CAAE,CAAE,CAAC,CACtCW,IAAI,CAAE,CAAED,QAAQ,CAAE,IAAI,CAAEV,KAAK,CAAE,CAAE,CAAC,CAClCY,MAAM,CAAE,CAAEF,QAAQ,CAAE,KAAK,CAAEV,KAAK,CAAE,CAAE,CACtC,CAAC,CACDa,SAAS,CAAE,EAAE,CACbC,QAAQ,CAAE,CAAEC,KAAK,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,UAAU,CAAE,QAAS,CAC7D,CACF,CAAC,CACH,CAEA,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAvE,KAAK,CAAC+E,GAAG,CAAC,yBAAyB,CAAC,CAE3D,GAAIR,QAAQ,CAACE,IAAI,CAACvB,OAAO,CAAE,CACzBjD,KAAK,CAACiD,OAAO,CAAC,oCAAoC,CAAE,CAClDwB,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,IAAI,CAAE4B,QAAQ,CAAEP,QAAQ,CAACE,IAAI,CAACK,QAAS,CAAC,CAC5D,CAAC,IAAM,CACL,KAAM,IAAI,CAAAtE,KAAK,CAAC+D,QAAQ,CAACE,IAAI,CAACE,KAAK,EAAI,aAAa,CAAC,CACvD,CACF,CAAE,MAAOA,KAAK,CAAE,KAAAK,eAAA,CACdhC,OAAO,CAAC2B,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C;AACA,GAAI,EAAAK,eAAA,CAAAL,KAAK,CAACJ,QAAQ,UAAAS,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,CAClC,MAAO,CACL/B,OAAO,CAAE,IAAI,CACb4B,QAAQ,CAAE,CACRzB,KAAK,CAAE,CAAC,CACRC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,QAAQ,CAAE,CAAC,CACXC,WAAW,CAAE,CAAC,CACdC,cAAc,CAAE,CAAC,CACjBnB,cAAc,CAAE,CAAC,CACjBoB,eAAe,CAAE,EAAE,CACnBC,YAAY,CAAE,EAAE,CAChBC,gBAAgB,CAAE,CAChBC,QAAQ,CAAE,CAAEC,QAAQ,CAAE,IAAI,CAAEV,KAAK,CAAE,CAAE,CAAC,CACtCW,IAAI,CAAE,CAAED,QAAQ,CAAE,IAAI,CAAEV,KAAK,CAAE,CAAE,CAAC,CAClCY,MAAM,CAAE,CAAEF,QAAQ,CAAE,KAAK,CAAEV,KAAK,CAAE,CAAE,CACtC,CAAC,CACDa,SAAS,CAAE,EAAE,CACbC,QAAQ,CAAE,CAAEC,KAAK,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,UAAU,CAAE,QAAS,CAC7D,CACF,CAAC,CACH,CACArE,KAAK,CAAC0E,KAAK,CAAC,2CAA2C,CAAE,CACvDD,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,KAAK,CAAEyB,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAAE,CAAC/C,WAAW,CAAEI,eAAe,CAAC,CAAC,CAElC;AACAlC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmF,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAIpE,eAAe,EAAID,IAAI,EAAI,CAACc,cAAc,CAAE,CAC9CqB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEpC,IAAI,CAACsE,QAAQ,CAAC,CACxD,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAP,YAAY,CAAC,CAAC,CACnC,GAAIO,MAAM,CAAClC,OAAO,CAAE,CAClBtB,iBAAiB,CAACwD,MAAM,CAACN,QAAQ,CAAC,CACpC,CACF,CACF,CAAC,CAEDI,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,CAACpE,eAAe,CAAED,IAAI,CAAEc,cAAc,CAAEkD,YAAY,CAAC,CAAC,CAEzD;AACA,KAAM,CAAAQ,aAAa,CAAG,CACpB,CACEC,EAAE,CAAE,SAAS,CACbC,QAAQ,CAAE,kDAAkD,CAC5DC,OAAO,CAAE,CACP,6CAA6C,CAC7C,uBAAuB,CACvB,0BAA0B,CAC1B,wBAAwB,CACzB,CACDC,aAAa,CAAE,CAAC,CAChBC,WAAW,CAAE,8GAA8G,CAC3HC,gBAAgB,CAAE,CAChBC,MAAM,CAAE,aAAa,CACrBC,OAAO,CAAE,GAAG,CACZC,WAAW,CAAE,8BAA8B,CAC3CC,YAAY,CAAE,yHAChB,CACF,CAAC,CACD,CACET,EAAE,CAAE,SAAS,CACbC,QAAQ,CAAE,2DAA2D,CACrEC,OAAO,CAAE,CACP,KAAK,CACL,IAAI,CACJ,KAAK,CACL,QAAQ,CACT,CACDC,aAAa,CAAE,CAAC,CAChBC,WAAW,CAAE,gHAAgH,CAC7HC,gBAAgB,CAAE,CAChBC,MAAM,CAAE,UAAU,CAClBC,OAAO,CAAE,KAAK,CACdC,WAAW,CAAE,oBAAoB,CACjCC,YAAY,CAAE,8GAChB,CACF,CAAC,CACF,CAED,KAAM,CAAAC,gBAAgB,CAAG,cAAAA,CAAA,CAA0B,IAAnB,CAAAtD,MAAM,CAAAG,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC5C,GAAI,CACFnB,UAAU,CAAC,IAAI,CAAC,CAEhB;AACA,GAAIG,WAAW,EAAII,eAAe,CAAE,CAClC,KAAM,CAAAgE,aAAa,CAAG,eAAe,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAClDnF,iBAAiB,CAAC,CAChBsE,EAAE,CAAEW,aAAa,CACjBvD,MAAM,CACNJ,iBAAiB,CAAE,CAAC,CACpBC,cAAc,CAAE,CAAC,CACjB6D,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CACtB,CAAC,CAAC,CACF9E,YAAY,CAAC,SAAS,CAAC,CACvBE,kBAAkB,CAAC,EAAE,CAAC,CAEtBrB,KAAK,CAACiD,OAAO,CAAC,gDAAgD,CAAE,CAC9DwB,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CAEF;AACA,KAAM,CAAA4D,iBAAiB,CAACJ,aAAa,CAAC,CAEtC,MAAO,CAAE/C,OAAO,CAAE,IAAI,CAAEoD,SAAS,CAAEL,aAAc,CAAC,CACpD,CAEA,KAAM,CAAA1B,QAAQ,CAAG,KAAM,CAAAvE,KAAK,CAACwE,IAAI,CAAC,yBAAyB,CAAE,CAAE9B,MAAO,CAAC,CAAC,CAExE,GAAI6B,QAAQ,CAACE,IAAI,CAACvB,OAAO,CAAE,CACzBlC,iBAAiB,CAAC,CAChBsE,EAAE,CAAEf,QAAQ,CAACE,IAAI,CAAC6B,SAAS,CAC3B5D,MAAM,CACNJ,iBAAiB,CAAE,CAAC,CACpBC,cAAc,CAAE,CAAC,CACjB6D,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CACtB,CAAC,CAAC,CACF9E,YAAY,CAAC,SAAS,CAAC,CACvBE,kBAAkB,CAAC,EAAE,CAAC,CAEtBrB,KAAK,CAACiD,OAAO,CAACqB,QAAQ,CAACE,IAAI,CAACG,OAAO,CAAE,CACnCF,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CAEF;AACA,KAAM,CAAA4D,iBAAiB,CAAC9B,QAAQ,CAACE,IAAI,CAAC6B,SAAS,CAAC,CAEhD,MAAO,CAAEpD,OAAO,CAAE,IAAI,CAAEoD,SAAS,CAAE/B,QAAQ,CAACE,IAAI,CAAC6B,SAAU,CAAC,CAC9D,CACF,CAAE,MAAO3B,KAAK,CAAE,KAAA4B,gBAAA,CAAAC,qBAAA,CACd,KAAM,CAAA5B,OAAO,CAAG,EAAA2B,gBAAA,CAAA5B,KAAK,CAACJ,QAAQ,UAAAgC,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgB9B,IAAI,UAAA+B,qBAAA,iBAApBA,qBAAA,CAAsB7B,KAAK,GAAI,8BAA8B,CAC7E1E,KAAK,CAAC0E,KAAK,CAAC,+BAA+BC,OAAO,EAAE,CAAE,CACpDF,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,KAAK,CAAEyB,KAAK,CAAEC,OAAQ,CAAC,CAC3C,CAAC,OAAS,CACRlD,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAA2E,iBAAiB,CAAG,cAAAA,CAAOC,SAAS,CAAmB,IAAjB,CAAAG,OAAO,CAAA5D,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACtD,GAAI,CACFnB,UAAU,CAAC,IAAI,CAAC,CAEhB;AACA,GAAIG,WAAW,EAAII,eAAe,CAAE,CAClC,KAAM,CAAAyE,oBAAoB,CAAGrF,eAAe,CAACyB,MAAM,CACnD,KAAM,CAAAyC,QAAQ,CAAGF,aAAa,CAACqB,oBAAoB,CAAGrB,aAAa,CAACvC,MAAM,CAAC,CAE3E5B,kBAAkB,CAAC,CACjB,GAAGqE,QAAQ,CACXa,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CACtB,CAAC,CAAC,CAEF;AACA1E,gBAAgB,CAAC,GAAG,CAAC,CAErB,MAAO,CAAE0B,OAAO,CAAE,IAAI,CAAEqC,QAAS,CAAC,CACpC,CAEA,KAAM,CAAAoB,MAAM,CAAG,GAAI,CAAAC,eAAe,CAACH,OAAO,CAAC,CAACI,QAAQ,CAAC,CAAC,CACtD,KAAM,CAAAtC,QAAQ,CAAG,KAAM,CAAAvE,KAAK,CAAC+E,GAAG,CAAC,sBAAsBuB,SAAS,IAAIK,MAAM,EAAE,CAAC,CAE7E,GAAIpC,QAAQ,CAACE,IAAI,CAACvB,OAAO,CAAE,CACzBhC,kBAAkB,CAAC,CACjB,GAAGqD,QAAQ,CAACE,IAAI,CAACc,QAAQ,CACzBuB,aAAa,CAAEvC,QAAQ,CAACE,IAAI,CAACqC,aAAa,CAC1CV,SAAS,CAAE,GAAI,CAAAF,IAAI,CAAC,CACtB,CAAC,CAAC,CAEF;AACA1E,gBAAgB,CAAC,GAAG,CAAC,CAErB,MAAO,CAAE0B,OAAO,CAAE,IAAI,CAAEqC,QAAQ,CAAEhB,QAAQ,CAACE,IAAI,CAACc,QAAS,CAAC,CAC5D,CACF,CAAE,MAAOZ,KAAK,CAAE,KAAAoC,gBAAA,CAAAC,qBAAA,CACd,KAAM,CAAApC,OAAO,CAAG,EAAAmC,gBAAA,CAAApC,KAAK,CAACJ,QAAQ,UAAAwC,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBtC,IAAI,UAAAuC,qBAAA,iBAApBA,qBAAA,CAAsBrC,KAAK,GAAI,0BAA0B,CACzE1E,KAAK,CAAC0E,KAAK,CAAC,mCAAmCC,OAAO,EAAE,CAAE,CACxDF,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,KAAK,CAAEyB,KAAK,CAAEC,OAAQ,CAAC,CAC3C,CAAC,OAAS,CACRlD,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAuF,YAAY,CAAG,KAAO,CAAAC,cAAc,EAAK,CAC7C,GAAI,CAACnG,cAAc,EAAI,CAACE,eAAe,CAAE,OAEzC,GAAI,CACFS,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAyF,SAAS,CAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,GAAI,CAAAnB,IAAI,CAAC,CAAC,CAAGjF,eAAe,CAACmF,SAAS,EAAI,IAAI,CAAC,CAE7E;AACA,GAAIvE,WAAW,EAAII,eAAe,CAAE,CAClC,KAAM,CAAAqF,OAAO,CAAGJ,cAAc,GAAKjG,eAAe,CAACwE,aAAa,CAChE,KAAM,CAAAL,MAAM,CAAG,CACbmC,UAAU,CAAEtG,eAAe,CAACqE,EAAE,CAC9BC,QAAQ,CAAEtE,eAAe,CAACsE,QAAQ,CAClC2B,cAAc,CACdI,OAAO,CACP5B,WAAW,CAAEzE,eAAe,CAACyE,WAAW,CACxCyB,SAAS,CACTK,UAAU,CAAEF,OAAO,CAAG,4DAA4D,CAAG,2CACvF,CAAC,CAED;AACAhG,kBAAkB,CAACmG,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAErC,MAAM,CAAC,CAAC,CAE7C;AACApE,iBAAiB,CAACyG,IAAI,GAAK,CACzB,GAAGA,IAAI,CACPnF,iBAAiB,CAAEmF,IAAI,CAACnF,iBAAiB,CAAG,CAAC,CAC7CC,cAAc,CAAEkF,IAAI,CAAClF,cAAc,EAAI+E,OAAO,CAAG,CAAC,CAAG,CAAC,CACxD,CAAC,CAAC,CAAC,CAEH;AACA,KAAM,CAAAI,SAAS,CAAGJ,OAAO,CAAG,SAAS,CAAG,OAAO,CAC/C,KAAM,CAAAK,SAAS,CAAGL,OAAO,CAAG,GAAG,CAAG,IAAI,CAEtCrH,KAAK,CAACyH,SAAS,CAAC,CAACtC,MAAM,CAACoC,UAAU,CAAE,CAClC9C,IAAI,CAAEiD,SAAS,CACflF,QAAQ,CAAE,IACZ,CAAC,CAAC,CAEF,MAAO,CAAES,OAAO,CAAE,IAAI,CAAEkC,MAAO,CAAC,CAClC,CAEA,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAvE,KAAK,CAACwE,IAAI,CAAC,kBAAkB,CAAE,CACpD8B,SAAS,CAAEvF,cAAc,CAACuE,EAAE,CAC5BiC,UAAU,CAAEtG,eAAe,CAACqE,EAAE,CAC9B4B,cAAc,CACdC,SACF,CAAC,CAAC,CAEF,GAAI5C,QAAQ,CAACE,IAAI,CAACvB,OAAO,CAAE,CACzB,KAAM,CAAAkC,MAAM,CAAG,CACbmC,UAAU,CAAEtG,eAAe,CAACqE,EAAE,CAC9BC,QAAQ,CAAEtE,eAAe,CAACsE,QAAQ,CAClC2B,cAAc,CACdI,OAAO,CAAE/C,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAC9B5B,WAAW,CAAEnB,QAAQ,CAACE,IAAI,CAACiB,WAAW,CACtCyB,SAAS,CACTS,cAAc,CAAErD,QAAQ,CAACE,IAAI,CAACmD,cAChC,CAAC,CAED;AACAtG,kBAAkB,CAACmG,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAErC,MAAM,CAAC,CAAC,CAE7C;AACApE,iBAAiB,CAACyG,IAAI,GAAK,CACzB,GAAGA,IAAI,CACPnF,iBAAiB,CAAEmF,IAAI,CAACnF,iBAAiB,CAAG,CAAC,CAC7CC,cAAc,CAAEkF,IAAI,CAAClF,cAAc,EAAIgC,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAAG,CAAC,CAAG,CAAC,CACtE,CAAC,CAAC,CAAC,CAEH;AACA1G,eAAe,CAAC,CACdiH,WAAW,CAAGJ,IAAI,EAAKA,IAAI,CAAGlD,QAAQ,CAACE,IAAI,CAACqD,YAAY,CACxDC,eAAe,CAAGN,IAAI,EAAKA,IAAI,CAAGlD,QAAQ,CAACE,IAAI,CAACuD,YAClD,CAAC,CAAC,CAEF;AACA,KAAM,CAAAN,SAAS,CAAGnD,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAAG,SAAS,CAAG,OAAO,CAC7D,KAAM,CAAAK,SAAS,CAAGpD,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAAG,GAAG,CAAG,IAAI,CAEpDrH,KAAK,CAACyH,SAAS,CAAC,CAACnD,QAAQ,CAACE,IAAI,CAACmD,cAAc,CAAE,CAC7ClD,IAAI,CAAEiD,SAAS,CACflF,QAAQ,CAAE,IACZ,CAAC,CAAC,CAEF,MAAO,CAAES,OAAO,CAAE,IAAI,CAAEkC,MAAO,CAAC,CAClC,CACF,CAAE,MAAOT,KAAK,CAAE,KAAAsD,gBAAA,CAAAC,qBAAA,CACd,KAAM,CAAAtD,OAAO,CAAG,EAAAqD,gBAAA,CAAAtD,KAAK,CAACJ,QAAQ,UAAA0D,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBxD,IAAI,UAAAyD,qBAAA,iBAApBA,qBAAA,CAAsBvD,KAAK,GAAI,yBAAyB,CACxE1E,KAAK,CAAC0E,KAAK,CAAC,+BAA+BC,OAAO,EAAE,CAAE,CACpDF,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACF,MAAO,CAAES,OAAO,CAAE,KAAK,CAAEyB,KAAK,CAAEC,OAAQ,CAAC,CAC3C,CAAC,OAAS,CACRlD,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAyG,cAAc,CAAGrI,WAAW,CAAC,SAAY,CAC7C,GAAIiB,cAAc,CAAE,CAClB,KAAM,CAAAqH,OAAO,CAAG,GAAI,CAAAlC,IAAI,CAAC,CAAC,CAC1B,KAAM,CAAAzD,QAAQ,CAAG2E,IAAI,CAACC,KAAK,CAAC,CAACe,OAAO,CAAGrH,cAAc,CAACqF,SAAS,EAAI,IAAI,CAAC,CAExEpF,iBAAiB,CAACyG,IAAI,GAAK,CACzB,GAAGA,IAAI,CACPW,OAAO,CACP3F,QACF,CAAC,CAAC,CAAC,CAEHrB,YAAY,CAAC,OAAO,CAAC,CACrBF,kBAAkB,CAAC,IAAI,CAAC,CACxBM,gBAAgB,CAAC,IAAI,CAAC,CAEtB,KAAM,CAAAa,QAAQ,CAAGtB,cAAc,CAACuB,iBAAiB,CAAG,CAAC,CACjD,CAACvB,cAAc,CAACwB,cAAc,CAAGxB,cAAc,CAACuB,iBAAiB,CAAG,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC,CACnF,CAAC,CAEL;AACA,KAAM,CAAA6F,gBAAgB,CAAGtH,cAAc,CAACwB,cAAc,CAAG,EAAE,CAC3D,KAAM,CAAA+F,WAAW,CAAGlB,IAAI,CAACC,KAAK,CAACtG,cAAc,CAACwB,cAAc,CAAG,GAAG,EAAIF,QAAQ,CAAG,GAAG,CAAC,CAAC,CAEtF;AACA,GAAIV,cAAc,CAAE,CAClB,KAAM,CAAA4G,eAAe,CAAG,CACtB,GAAG5G,cAAc,CACjB2B,UAAU,CAAE3B,cAAc,CAAC2B,UAAU,CAAG+E,gBAAgB,CACxD9E,UAAU,CAAE5B,cAAc,CAAC4B,UAAU,CAAG+E,WAAW,CACnD7E,WAAW,CAAE9B,cAAc,CAAC8B,WAAW,CAAG,CAAC,CAC3CC,cAAc,CAAE/B,cAAc,CAAC+B,cAAc,CAAG3C,cAAc,CAACuB,iBAAiB,CAChFC,cAAc,CAAEZ,cAAc,CAACY,cAAc,CAAGxB,cAAc,CAACwB,cACjE,CAAC,CAEDX,iBAAiB,CAAC2G,eAAe,CAAC,CAElC;AACA,KAAM,CAAA5F,YAAY,CAAC4F,eAAe,CAAC,CACrC,CAEAtI,KAAK,CAACiD,OAAO,CAAC,wCAAwCb,QAAQ,GAAG,CAAE,CACjEqC,IAAI,CAAE,IAAI,CACVjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CAEF,GAAI4F,gBAAgB,CAAG,CAAC,CAAE,CACxBpI,KAAK,CAACiD,OAAO,CAAC,IAAImF,gBAAgB,oBAAoB,CAAE,CACtD3D,IAAI,CAAE,GAAG,CACTjC,QAAQ,CAAE,IACZ,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAE,CAAC1B,cAAc,CAAEY,cAAc,CAAEgB,YAAY,CAAC,CAAC,CAElD,KAAM,CAAA6F,SAAS,CAAGA,CAAA,GAAM,CACtBpH,YAAY,CAAC,QAAQ,CAAC,CACxB,CAAC,CAED,KAAM,CAAAqH,UAAU,CAAGA,CAAA,GAAM,CACvBrH,YAAY,CAAC,SAAS,CAAC,CACzB,CAAC,CAED,KAAM,CAAAsH,SAAS,CAAGA,CAAA,GAAM,CACtB1H,iBAAiB,CAAC,IAAI,CAAC,CACvBE,kBAAkB,CAAC,IAAI,CAAC,CACxBE,YAAY,CAAC,MAAM,CAAC,CACpBE,kBAAkB,CAAC,EAAE,CAAC,CACtBE,gBAAgB,CAAC,IAAI,CAAC,CACxB,CAAC,CAID,KAAM,CAAAmH,KAAK,CAAG,CACZ5H,cAAc,CACdE,eAAe,CACfE,SAAS,CACTE,eAAe,CACfE,aAAa,CACbE,OAAO,CACPE,cAAc,CACdqE,gBAAgB,CAChBK,iBAAiB,CACjBY,YAAY,CACZkB,cAAc,CACdK,SAAS,CACTC,UAAU,CACVC,SAAS,CACTtG,YAAY,CACZZ,gBAAgB,CAChBmB,YAAY,CACZkC,YACF,CAAC,CAED,mBACEzE,IAAA,CAACC,WAAW,CAACuI,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAhI,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}