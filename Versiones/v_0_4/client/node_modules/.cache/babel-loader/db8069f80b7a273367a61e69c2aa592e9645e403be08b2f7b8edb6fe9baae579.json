{"ast":null,"code":"import React,{createContext,useContext,useState,useCallback}from'react';import axios from'axios';import toast from'react-hot-toast';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext();export const useGame=()=>{const context=useContext(GameContext);if(!context){throw new Error('useGame must be used within a GameProvider');}return context;};export const GameProvider=_ref=>{let{children}=_ref;const{updateUserStats}=useAuth();const[currentSession,setCurrentSession]=useState(null);const[currentQuestion,setCurrentQuestion]=useState(null);const[gameState,setGameState]=useState('idle');// idle, playing, paused, ended\nconst[questionHistory,setQuestionHistory]=useState([]);const[timeRemaining,setTimeRemaining]=useState(null);const[loading,setLoading]=useState(false);const startGameSession=async function(){let domain=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';try{setLoading(true);const response=await axios.post('/api/game/start-session',{domain});if(response.data.success){setCurrentSession({id:response.data.sessionId,domain,questionsAnswered:0,correctAnswers:0,startTime:new Date()});setGameState('playing');setQuestionHistory([]);toast.success(response.data.message,{icon:'ðŸŒŒ',duration:4000});// Fetch first question\nawait fetchNextQuestion(response.data.sessionId);return{success:true,sessionId:response.data.sessionId};}}catch(error){var _error$response,_error$response$data;const message=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Failed to start game session';toast.error(`The ritual failed to begin: ${message}`,{icon:'ðŸ’€',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const fetchNextQuestion=async function(sessionId){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{setLoading(true);const params=new URLSearchParams(filters).toString();const response=await axios.get(`/api/game/question/${sessionId}?${params}`);if(response.data.success){setCurrentQuestion({...response.data.question,cosmicContext:response.data.cosmicContext,startTime:new Date()});// Set timer for question (2 minutes per question like real exam)\nsetTimeRemaining(120);return{success:true,question:response.data.question};}}catch(error){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to fetch question';toast.error(`The cosmic knowledge eludes us: ${message}`,{icon:'ðŸŒ€',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const submitAnswer=async selectedAnswer=>{if(!currentSession||!currentQuestion)return;try{setLoading(true);const timeTaken=Math.floor((new Date()-currentQuestion.startTime)/1000);const response=await axios.post('/api/game/answer',{sessionId:currentSession.id,questionId:currentQuestion.id,selectedAnswer,timeTaken});if(response.data.success){const result={questionId:currentQuestion.id,question:currentQuestion.question,selectedAnswer,correct:response.data.correct,explanation:response.data.explanation,timeTaken,cosmicResponse:response.data.cosmicResponse};// Update question history\nsetQuestionHistory(prev=>[...prev,result]);// Update session stats\nsetCurrentSession(prev=>({...prev,questionsAnswered:prev.questionsAnswered+1,correctAnswers:prev.correctAnswers+(response.data.correct?1:0)}));// Update user stats\nupdateUserStats({sanityLevel:prev=>prev+response.data.sanityChange,knowledgeShards:prev=>prev+response.data.shardsChange});// Show cosmic response\nconst toastType=response.data.correct?'success':'error';const toastIcon=response.data.correct?'âœ¨':'ðŸ’€';toast[toastType](response.data.cosmicResponse,{icon:toastIcon,duration:4000});return{success:true,result};}}catch(error){var _error$response3,_error$response3$data;const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to submit answer';toast.error(`The cosmic judgment failed: ${message}`,{icon:'ðŸ’€',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const endGameSession=useCallback(()=>{if(currentSession){const endTime=new Date();const duration=Math.floor((endTime-currentSession.startTime)/1000);setCurrentSession(prev=>({...prev,endTime,duration}));setGameState('ended');setCurrentQuestion(null);setTimeRemaining(null);const accuracy=currentSession.questionsAnswered>0?(currentSession.correctAnswers/currentSession.questionsAnswered*100).toFixed(1):0;toast.success(`Ritual complete! Accuracy: ${accuracy}%`,{icon:'ðŸŒŸ',duration:5000});}},[currentSession]);const pauseGame=()=>{setGameState('paused');};const resumeGame=()=>{setGameState('playing');};const resetGame=()=>{setCurrentSession(null);setCurrentQuestion(null);setGameState('idle');setQuestionHistory([]);setTimeRemaining(null);};const getGameStats=()=>{if(!currentSession)return null;const accuracy=currentSession.questionsAnswered>0?(currentSession.correctAnswers/currentSession.questionsAnswered*100).toFixed(1):0;return{questionsAnswered:currentSession.questionsAnswered,correctAnswers:currentSession.correctAnswers,accuracy,duration:currentSession.duration,domain:currentSession.domain};};const value={currentSession,currentQuestion,gameState,questionHistory,timeRemaining,loading,startGameSession,fetchNextQuestion,submitAnswer,endGameSession,pauseGame,resumeGame,resetGame,getGameStats,setTimeRemaining};return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","axios","toast","useAuth","jsx","_jsx","GameContext","useGame","context","Error","GameProvider","_ref","children","updateUserStats","currentSession","setCurrentSession","currentQuestion","setCurrentQuestion","gameState","setGameState","questionHistory","setQuestionHistory","timeRemaining","setTimeRemaining","loading","setLoading","startGameSession","domain","arguments","length","undefined","response","post","data","success","id","sessionId","questionsAnswered","correctAnswers","startTime","Date","message","icon","duration","fetchNextQuestion","error","_error$response","_error$response$data","filters","params","URLSearchParams","toString","get","question","cosmicContext","_error$response2","_error$response2$data","submitAnswer","selectedAnswer","timeTaken","Math","floor","questionId","result","correct","explanation","cosmicResponse","prev","sanityLevel","sanityChange","knowledgeShards","shardsChange","toastType","toastIcon","_error$response3","_error$response3$data","endGameSession","endTime","accuracy","toFixed","pauseGame","resumeGame","resetGame","getGameStats","value","Provider"],"sources":["/Users/A1064331/Desktop/AWS/Claude/Juego_Estudio_Arq_Soluciones/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\n\nconst GameContext = createContext();\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport const GameProvider = ({ children }) => {\n  const { updateUserStats } = useAuth();\n  const [currentSession, setCurrentSession] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gameState, setGameState] = useState('idle'); // idle, playing, paused, ended\n  const [questionHistory, setQuestionHistory] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const startGameSession = async (domain = 'all') => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/game/start-session', { domain });\n      \n      if (response.data.success) {\n        setCurrentSession({\n          id: response.data.sessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date(),\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        \n        toast.success(response.data.message, {\n          icon: 'ðŸŒŒ',\n          duration: 4000,\n        });\n        \n        // Fetch first question\n        await fetchNextQuestion(response.data.sessionId);\n        \n        return { success: true, sessionId: response.data.sessionId };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to start game session';\n      toast.error(`The ritual failed to begin: ${message}`, {\n        icon: 'ðŸ’€',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchNextQuestion = async (sessionId, filters = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams(filters).toString();\n      const response = await axios.get(`/api/game/question/${sessionId}?${params}`);\n      \n      if (response.data.success) {\n        setCurrentQuestion({\n          ...response.data.question,\n          cosmicContext: response.data.cosmicContext,\n          startTime: new Date(),\n        });\n        \n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        \n        return { success: true, question: response.data.question };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to fetch question';\n      toast.error(`The cosmic knowledge eludes us: ${message}`, {\n        icon: 'ðŸŒ€',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitAnswer = async (selectedAnswer) => {\n    if (!currentSession || !currentQuestion) return;\n    \n    try {\n      setLoading(true);\n      const timeTaken = Math.floor((new Date() - currentQuestion.startTime) / 1000);\n      \n      const response = await axios.post('/api/game/answer', {\n        sessionId: currentSession.id,\n        questionId: currentQuestion.id,\n        selectedAnswer,\n        timeTaken,\n      });\n      \n      if (response.data.success) {\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct: response.data.correct,\n          explanation: response.data.explanation,\n          timeTaken,\n          cosmicResponse: response.data.cosmicResponse,\n        };\n        \n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n        \n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (response.data.correct ? 1 : 0),\n        }));\n        \n        // Update user stats\n        updateUserStats({\n          sanityLevel: (prev) => prev + response.data.sanityChange,\n          knowledgeShards: (prev) => prev + response.data.shardsChange,\n        });\n        \n        // Show cosmic response\n        const toastType = response.data.correct ? 'success' : 'error';\n        const toastIcon = response.data.correct ? 'âœ¨' : 'ðŸ’€';\n        \n        toast[toastType](response.data.cosmicResponse, {\n          icon: toastIcon,\n          duration: 4000,\n        });\n        \n        return { success: true, result };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to submit answer';\n      toast.error(`The cosmic judgment failed: ${message}`, {\n        icon: 'ðŸ’€',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const endGameSession = useCallback(() => {\n    if (currentSession) {\n      const endTime = new Date();\n      const duration = Math.floor((endTime - currentSession.startTime) / 1000);\n      \n      setCurrentSession(prev => ({\n        ...prev,\n        endTime,\n        duration,\n      }));\n      \n      setGameState('ended');\n      setCurrentQuestion(null);\n      setTimeRemaining(null);\n      \n      const accuracy = currentSession.questionsAnswered > 0 \n        ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n        : 0;\n      \n      toast.success(`Ritual complete! Accuracy: ${accuracy}%`, {\n        icon: 'ðŸŒŸ',\n        duration: 5000,\n      });\n    }\n  }, [currentSession]);\n\n  const pauseGame = () => {\n    setGameState('paused');\n  };\n\n  const resumeGame = () => {\n    setGameState('playing');\n  };\n\n  const resetGame = () => {\n    setCurrentSession(null);\n    setCurrentQuestion(null);\n    setGameState('idle');\n    setQuestionHistory([]);\n    setTimeRemaining(null);\n  };\n\n  const getGameStats = () => {\n    if (!currentSession) return null;\n    \n    const accuracy = currentSession.questionsAnswered > 0 \n      ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n      : 0;\n    \n    return {\n      questionsAnswered: currentSession.questionsAnswered,\n      correctAnswers: currentSession.correctAnswers,\n      accuracy,\n      duration: currentSession.duration,\n      domain: currentSession.domain,\n    };\n  };\n\n  const value = {\n    currentSession,\n    currentQuestion,\n    gameState,\n    questionHistory,\n    timeRemaining,\n    loading,\n    startGameSession,\n    fetchNextQuestion,\n    submitAnswer,\n    endGameSession,\n    pauseGame,\n    resumeGame,\n    resetGame,\n    getGameStats,\n    setTimeRemaining,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}