{"ast":null,"code":"var _jsxFileName = \"/Users/A1064331/Desktop/AWS/Claude/Juego_Estudio_Arq_Soluciones/client/src/contexts/GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\nexport const useGame = () => {\n  _s();\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n_s(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    updateUserStats\n  } = useAuth();\n  const [currentSession, setCurrentSession] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gameState, setGameState] = useState('idle'); // idle, playing, paused, ended\n  const [questionHistory, setQuestionHistory] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const startGameSession = async (domain = 'all') => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/game/start-session', {\n        domain\n      });\n      if (response.data.success) {\n        setCurrentSession({\n          id: response.data.sessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date()\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        toast.success(response.data.message, {\n          icon: 'ðŸŒŒ',\n          duration: 4000\n        });\n\n        // Fetch first question\n        await fetchNextQuestion(response.data.sessionId);\n        return {\n          success: true,\n          sessionId: response.data.sessionId\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to start game session';\n      toast.error(`The ritual failed to begin: ${message}`, {\n        icon: 'ðŸ’€',\n        duration: 4000\n      });\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchNextQuestion = async (sessionId, filters = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams(filters).toString();\n      const response = await axios.get(`/api/game/question/${sessionId}?${params}`);\n      if (response.data.success) {\n        setCurrentQuestion({\n          ...response.data.question,\n          cosmicContext: response.data.cosmicContext,\n          startTime: new Date()\n        });\n\n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        return {\n          success: true,\n          question: response.data.question\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch question';\n      toast.error(`The cosmic knowledge eludes us: ${message}`, {\n        icon: 'ðŸŒ€',\n        duration: 4000\n      });\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const submitAnswer = async selectedAnswer => {\n    if (!currentSession || !currentQuestion) return;\n    try {\n      setLoading(true);\n      const timeTaken = Math.floor((new Date() - currentQuestion.startTime) / 1000);\n      const response = await axios.post('/api/game/answer', {\n        sessionId: currentSession.id,\n        questionId: currentQuestion.id,\n        selectedAnswer,\n        timeTaken\n      });\n      if (response.data.success) {\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct: response.data.correct,\n          explanation: response.data.explanation,\n          timeTaken,\n          cosmicResponse: response.data.cosmicResponse\n        };\n\n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n\n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (response.data.correct ? 1 : 0)\n        }));\n\n        // Update user stats\n        updateUserStats({\n          sanityLevel: prev => prev + response.data.sanityChange,\n          knowledgeShards: prev => prev + response.data.shardsChange\n        });\n\n        // Show cosmic response\n        const toastType = response.data.correct ? 'success' : 'error';\n        const toastIcon = response.data.correct ? 'âœ¨' : 'ðŸ’€';\n        toast[toastType](response.data.cosmicResponse, {\n          icon: toastIcon,\n          duration: 4000\n        });\n        return {\n          success: true,\n          result\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to submit answer';\n      toast.error(`The cosmic judgment failed: ${message}`, {\n        icon: 'ðŸ’€',\n        duration: 4000\n      });\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const endGameSession = useCallback(() => {\n    if (currentSession) {\n      const endTime = new Date();\n      const duration = Math.floor((endTime - currentSession.startTime) / 1000);\n      setCurrentSession(prev => ({\n        ...prev,\n        endTime,\n        duration\n      }));\n      setGameState('ended');\n      setCurrentQuestion(null);\n      setTimeRemaining(null);\n      const accuracy = currentSession.questionsAnswered > 0 ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1) : 0;\n      toast.success(`Ritual complete! Accuracy: ${accuracy}%`, {\n        icon: 'ðŸŒŸ',\n        duration: 5000\n      });\n    }\n  }, [currentSession]);\n  const pauseGame = () => {\n    setGameState('paused');\n  };\n  const resumeGame = () => {\n    setGameState('playing');\n  };\n  const resetGame = () => {\n    setCurrentSession(null);\n    setCurrentQuestion(null);\n    setGameState('idle');\n    setQuestionHistory([]);\n    setTimeRemaining(null);\n  };\n  const getGameStats = () => {\n    if (!currentSession) return null;\n    const accuracy = currentSession.questionsAnswered > 0 ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1) : 0;\n    return {\n      questionsAnswered: currentSession.questionsAnswered,\n      correctAnswers: currentSession.correctAnswers,\n      accuracy,\n      duration: currentSession.duration,\n      domain: currentSession.domain\n    };\n  };\n  const value = {\n    currentSession,\n    currentQuestion,\n    gameState,\n    questionHistory,\n    timeRemaining,\n    loading,\n    startGameSession,\n    fetchNextQuestion,\n    submitAnswer,\n    endGameSession,\n    pauseGame,\n    resumeGame,\n    resetGame,\n    getGameStats,\n    setTimeRemaining\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"S3+4hSx/7Tncl2JljqZfPigdoAA=\", false, function () {\n  return [useAuth];\n});\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","axios","toast","useAuth","jsxDEV","_jsxDEV","GameContext","useGame","_s","context","Error","GameProvider","children","_s2","updateUserStats","currentSession","setCurrentSession","currentQuestion","setCurrentQuestion","gameState","setGameState","questionHistory","setQuestionHistory","timeRemaining","setTimeRemaining","loading","setLoading","startGameSession","domain","response","post","data","success","id","sessionId","questionsAnswered","correctAnswers","startTime","Date","message","icon","duration","fetchNextQuestion","error","_error$response","_error$response$data","filters","params","URLSearchParams","toString","get","question","cosmicContext","_error$response2","_error$response2$data","submitAnswer","selectedAnswer","timeTaken","Math","floor","questionId","result","correct","explanation","cosmicResponse","prev","sanityLevel","sanityChange","knowledgeShards","shardsChange","toastType","toastIcon","_error$response3","_error$response3$data","endGameSession","endTime","accuracy","toFixed","pauseGame","resumeGame","resetGame","getGameStats","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/A1064331/Desktop/AWS/Claude/Juego_Estudio_Arq_Soluciones/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\n\nconst GameContext = createContext();\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport const GameProvider = ({ children }) => {\n  const { updateUserStats } = useAuth();\n  const [currentSession, setCurrentSession] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gameState, setGameState] = useState('idle'); // idle, playing, paused, ended\n  const [questionHistory, setQuestionHistory] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const startGameSession = async (domain = 'all') => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/game/start-session', { domain });\n      \n      if (response.data.success) {\n        setCurrentSession({\n          id: response.data.sessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date(),\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        \n        toast.success(response.data.message, {\n          icon: 'ðŸŒŒ',\n          duration: 4000,\n        });\n        \n        // Fetch first question\n        await fetchNextQuestion(response.data.sessionId);\n        \n        return { success: true, sessionId: response.data.sessionId };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to start game session';\n      toast.error(`The ritual failed to begin: ${message}`, {\n        icon: 'ðŸ’€',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchNextQuestion = async (sessionId, filters = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams(filters).toString();\n      const response = await axios.get(`/api/game/question/${sessionId}?${params}`);\n      \n      if (response.data.success) {\n        setCurrentQuestion({\n          ...response.data.question,\n          cosmicContext: response.data.cosmicContext,\n          startTime: new Date(),\n        });\n        \n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        \n        return { success: true, question: response.data.question };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to fetch question';\n      toast.error(`The cosmic knowledge eludes us: ${message}`, {\n        icon: 'ðŸŒ€',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitAnswer = async (selectedAnswer) => {\n    if (!currentSession || !currentQuestion) return;\n    \n    try {\n      setLoading(true);\n      const timeTaken = Math.floor((new Date() - currentQuestion.startTime) / 1000);\n      \n      const response = await axios.post('/api/game/answer', {\n        sessionId: currentSession.id,\n        questionId: currentQuestion.id,\n        selectedAnswer,\n        timeTaken,\n      });\n      \n      if (response.data.success) {\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct: response.data.correct,\n          explanation: response.data.explanation,\n          timeTaken,\n          cosmicResponse: response.data.cosmicResponse,\n        };\n        \n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n        \n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (response.data.correct ? 1 : 0),\n        }));\n        \n        // Update user stats\n        updateUserStats({\n          sanityLevel: (prev) => prev + response.data.sanityChange,\n          knowledgeShards: (prev) => prev + response.data.shardsChange,\n        });\n        \n        // Show cosmic response\n        const toastType = response.data.correct ? 'success' : 'error';\n        const toastIcon = response.data.correct ? 'âœ¨' : 'ðŸ’€';\n        \n        toast[toastType](response.data.cosmicResponse, {\n          icon: toastIcon,\n          duration: 4000,\n        });\n        \n        return { success: true, result };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to submit answer';\n      toast.error(`The cosmic judgment failed: ${message}`, {\n        icon: 'ðŸ’€',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const endGameSession = useCallback(() => {\n    if (currentSession) {\n      const endTime = new Date();\n      const duration = Math.floor((endTime - currentSession.startTime) / 1000);\n      \n      setCurrentSession(prev => ({\n        ...prev,\n        endTime,\n        duration,\n      }));\n      \n      setGameState('ended');\n      setCurrentQuestion(null);\n      setTimeRemaining(null);\n      \n      const accuracy = currentSession.questionsAnswered > 0 \n        ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n        : 0;\n      \n      toast.success(`Ritual complete! Accuracy: ${accuracy}%`, {\n        icon: 'ðŸŒŸ',\n        duration: 5000,\n      });\n    }\n  }, [currentSession]);\n\n  const pauseGame = () => {\n    setGameState('paused');\n  };\n\n  const resumeGame = () => {\n    setGameState('playing');\n  };\n\n  const resetGame = () => {\n    setCurrentSession(null);\n    setCurrentQuestion(null);\n    setGameState('idle');\n    setQuestionHistory([]);\n    setTimeRemaining(null);\n  };\n\n  const getGameStats = () => {\n    if (!currentSession) return null;\n    \n    const accuracy = currentSession.questionsAnswered > 0 \n      ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n      : 0;\n    \n    return {\n      questionsAnswered: currentSession.questionsAnswered,\n      correctAnswers: currentSession.correctAnswers,\n      accuracy,\n      duration: currentSession.duration,\n      domain: currentSession.domain,\n    };\n  };\n\n  const value = {\n    currentSession,\n    currentQuestion,\n    gameState,\n    questionHistory,\n    timeRemaining,\n    loading,\n    startGameSession,\n    fetchNextQuestion,\n    submitAnswer,\n    endGameSession,\n    pauseGame,\n    resumeGame,\n    resetGame,\n    getGameStats,\n    setTimeRemaining,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}