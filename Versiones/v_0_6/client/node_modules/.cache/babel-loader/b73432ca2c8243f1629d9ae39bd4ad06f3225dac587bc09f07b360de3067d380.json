{"ast":null,"code":"import React,{createContext,useContext,useState,useCallback}from'react';import axios from'axios';import toast from'react-hot-toast';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const GameContext=/*#__PURE__*/createContext();export const useGame=()=>{const context=useContext(GameContext);if(!context){throw new Error('useGame must be used within a GameProvider');}return context;};export const GameProvider=_ref=>{let{children}=_ref;const{updateUserStats}=useAuth();const[currentSession,setCurrentSession]=useState(null);const[currentQuestion,setCurrentQuestion]=useState(null);const[gameState,setGameState]=useState('idle');// idle, playing, paused, ended\nconst[questionHistory,setQuestionHistory]=useState([]);const[timeRemaining,setTimeRemaining]=useState(null);const[loading,setLoading]=useState(false);// Development mode for testing\nconst isLocalhost=window.location.hostname==='localhost'||window.location.hostname==='127.0.0.1';const testModeEnabled=localStorage.getItem('test_mode_enabled')==='true';// Mock questions for testing\nconst mockQuestions=[{id:'test-q1',question:'What is the primary benefit of using AWS Lambda?',options:['Serverless computing with automatic scaling','Fixed server capacity','Manual server management','Physical server access'],correctAnswer:0,explanation:'AWS Lambda provides serverless computing with automatic scaling, eliminating the need for server management.',cyberpunkContext:{aiName:'LAMBDA-CORE',aiEmoji:'⚡',description:'Serverless Processing Entity',neuralPrompt:'The Lambda-Core entity pulses with raw computational power, its serverless tendrils reaching across the digital void...'}},{id:'test-q2',question:'Which AWS service is best for storing static web content?',options:['EC2','S3','RDS','Lambda'],correctAnswer:1,explanation:'Amazon S3 is designed for storing and retrieving any amount of data, making it perfect for static web content.',cyberpunkContext:{aiName:'S3-VAULT',aiEmoji:'🗄️',description:'Data Storage Nexus',neuralPrompt:'The S3-Vault materializes from the data streams, its infinite storage capacity echoing through cyberspace...'}}];const startGameSession=async function(){let domain=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';try{setLoading(true);// Use mock data in test mode\nif(isLocalhost&&testModeEnabled){const mockSessionId='test-session-'+Date.now();setCurrentSession({id:mockSessionId,domain,questionsAnswered:0,correctAnswers:0,startTime:new Date()});setGameState('playing');setQuestionHistory([]);toast.success('Neural interface activated! Test mode enabled.',{icon:'🤖',duration:4000});// Fetch first question\nawait fetchNextQuestion(mockSessionId);return{success:true,sessionId:mockSessionId};}const response=await axios.post('/api/game/start-session',{domain});if(response.data.success){setCurrentSession({id:response.data.sessionId,domain,questionsAnswered:0,correctAnswers:0,startTime:new Date()});setGameState('playing');setQuestionHistory([]);toast.success(response.data.message,{icon:'🌌',duration:4000});// Fetch first question\nawait fetchNextQuestion(response.data.sessionId);return{success:true,sessionId:response.data.sessionId};}}catch(error){var _error$response,_error$response$data;const message=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Failed to start game session';toast.error(`The ritual failed to begin: ${message}`,{icon:'💀',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const fetchNextQuestion=async function(sessionId){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{setLoading(true);// Use mock data in test mode\nif(isLocalhost&&testModeEnabled){const currentQuestionIndex=questionHistory.length;const question=mockQuestions[currentQuestionIndex%mockQuestions.length];setCurrentQuestion({...question,startTime:new Date()});// Set timer for question (2 minutes per question like real exam)\nsetTimeRemaining(120);return{success:true,question};}const params=new URLSearchParams(filters).toString();const response=await axios.get(`/api/game/question/${sessionId}?${params}`);if(response.data.success){setCurrentQuestion({...response.data.question,cosmicContext:response.data.cosmicContext,startTime:new Date()});// Set timer for question (2 minutes per question like real exam)\nsetTimeRemaining(120);return{success:true,question:response.data.question};}}catch(error){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Failed to fetch question';toast.error(`The cosmic knowledge eludes us: ${message}`,{icon:'🌀',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const submitAnswer=async selectedAnswer=>{if(!currentSession||!currentQuestion)return;try{setLoading(true);const timeTaken=Math.floor((new Date()-currentQuestion.startTime)/1000);// Use mock data in test mode\nif(isLocalhost&&testModeEnabled){const correct=selectedAnswer===currentQuestion.correctAnswer;const result={questionId:currentQuestion.id,question:currentQuestion.question,selectedAnswer,correct,explanation:currentQuestion.explanation,timeTaken,aiResponse:correct?'Excellent! Your neural pathways are functioning optimally.':'Incorrect. Recalibrating neural matrix...'};// Update question history\nsetQuestionHistory(prev=>[...prev,result]);// Update session stats\nsetCurrentSession(prev=>({...prev,questionsAnswered:prev.questionsAnswered+1,correctAnswers:prev.correctAnswers+(correct?1:0)}));// Show response\nconst toastType=correct?'success':'error';const toastIcon=correct?'✨':'💀';toast[toastType](result.aiResponse,{icon:toastIcon,duration:4000});return{success:true,result};}const response=await axios.post('/api/game/answer',{sessionId:currentSession.id,questionId:currentQuestion.id,selectedAnswer,timeTaken});if(response.data.success){const result={questionId:currentQuestion.id,question:currentQuestion.question,selectedAnswer,correct:response.data.correct,explanation:response.data.explanation,timeTaken,cosmicResponse:response.data.cosmicResponse};// Update question history\nsetQuestionHistory(prev=>[...prev,result]);// Update session stats\nsetCurrentSession(prev=>({...prev,questionsAnswered:prev.questionsAnswered+1,correctAnswers:prev.correctAnswers+(response.data.correct?1:0)}));// Update user stats\nupdateUserStats({sanityLevel:prev=>prev+response.data.sanityChange,knowledgeShards:prev=>prev+response.data.shardsChange});// Show cosmic response\nconst toastType=response.data.correct?'success':'error';const toastIcon=response.data.correct?'✨':'💀';toast[toastType](response.data.cosmicResponse,{icon:toastIcon,duration:4000});return{success:true,result};}}catch(error){var _error$response3,_error$response3$data;const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Failed to submit answer';toast.error(`The cosmic judgment failed: ${message}`,{icon:'💀',duration:4000});return{success:false,error:message};}finally{setLoading(false);}};const endGameSession=useCallback(()=>{if(currentSession){const endTime=new Date();const duration=Math.floor((endTime-currentSession.startTime)/1000);setCurrentSession(prev=>({...prev,endTime,duration}));setGameState('ended');setCurrentQuestion(null);setTimeRemaining(null);const accuracy=currentSession.questionsAnswered>0?(currentSession.correctAnswers/currentSession.questionsAnswered*100).toFixed(1):0;toast.success(`Ritual complete! Accuracy: ${accuracy}%`,{icon:'🌟',duration:5000});}},[currentSession]);const pauseGame=()=>{setGameState('paused');};const resumeGame=()=>{setGameState('playing');};const resetGame=()=>{setCurrentSession(null);setCurrentQuestion(null);setGameState('idle');setQuestionHistory([]);setTimeRemaining(null);};const getGameStats=()=>{if(!currentSession)return null;const accuracy=currentSession.questionsAnswered>0?(currentSession.correctAnswers/currentSession.questionsAnswered*100).toFixed(1):0;return{questionsAnswered:currentSession.questionsAnswered,correctAnswers:currentSession.correctAnswers,accuracy,duration:currentSession.duration,domain:currentSession.domain};};const value={currentSession,currentQuestion,gameState,questionHistory,timeRemaining,loading,startGameSession,fetchNextQuestion,submitAnswer,endGameSession,pauseGame,resumeGame,resetGame,getGameStats,setTimeRemaining};return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","axios","toast","useAuth","jsx","_jsx","GameContext","useGame","context","Error","GameProvider","_ref","children","updateUserStats","currentSession","setCurrentSession","currentQuestion","setCurrentQuestion","gameState","setGameState","questionHistory","setQuestionHistory","timeRemaining","setTimeRemaining","loading","setLoading","isLocalhost","window","location","hostname","testModeEnabled","localStorage","getItem","mockQuestions","id","question","options","correctAnswer","explanation","cyberpunkContext","aiName","aiEmoji","description","neuralPrompt","startGameSession","domain","arguments","length","undefined","mockSessionId","Date","now","questionsAnswered","correctAnswers","startTime","success","icon","duration","fetchNextQuestion","sessionId","response","post","data","message","error","_error$response","_error$response$data","filters","currentQuestionIndex","params","URLSearchParams","toString","get","cosmicContext","_error$response2","_error$response2$data","submitAnswer","selectedAnswer","timeTaken","Math","floor","correct","result","questionId","aiResponse","prev","toastType","toastIcon","cosmicResponse","sanityLevel","sanityChange","knowledgeShards","shardsChange","_error$response3","_error$response3$data","endGameSession","endTime","accuracy","toFixed","pauseGame","resumeGame","resetGame","getGameStats","value","Provider"],"sources":["/Users/A1064331/Desktop/AWS/Claude/Juego_Estudio_Arq_Soluciones/client/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\n\nconst GameContext = createContext();\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (!context) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n\nexport const GameProvider = ({ children }) => {\n  const { updateUserStats } = useAuth();\n  const [currentSession, setCurrentSession] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gameState, setGameState] = useState('idle'); // idle, playing, paused, ended\n  const [questionHistory, setQuestionHistory] = useState([]);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [loading, setLoading] = useState(false);\n  \n  // Development mode for testing\n  const isLocalhost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n  const testModeEnabled = localStorage.getItem('test_mode_enabled') === 'true';\n  \n  // Mock questions for testing\n  const mockQuestions = [\n    {\n      id: 'test-q1',\n      question: 'What is the primary benefit of using AWS Lambda?',\n      options: [\n        'Serverless computing with automatic scaling',\n        'Fixed server capacity',\n        'Manual server management',\n        'Physical server access'\n      ],\n      correctAnswer: 0,\n      explanation: 'AWS Lambda provides serverless computing with automatic scaling, eliminating the need for server management.',\n      cyberpunkContext: {\n        aiName: 'LAMBDA-CORE',\n        aiEmoji: '⚡',\n        description: 'Serverless Processing Entity',\n        neuralPrompt: 'The Lambda-Core entity pulses with raw computational power, its serverless tendrils reaching across the digital void...'\n      }\n    },\n    {\n      id: 'test-q2',\n      question: 'Which AWS service is best for storing static web content?',\n      options: [\n        'EC2',\n        'S3',\n        'RDS',\n        'Lambda'\n      ],\n      correctAnswer: 1,\n      explanation: 'Amazon S3 is designed for storing and retrieving any amount of data, making it perfect for static web content.',\n      cyberpunkContext: {\n        aiName: 'S3-VAULT',\n        aiEmoji: '🗄️',\n        description: 'Data Storage Nexus',\n        neuralPrompt: 'The S3-Vault materializes from the data streams, its infinite storage capacity echoing through cyberspace...'\n      }\n    }\n  ];\n\n  const startGameSession = async (domain = 'all') => {\n    try {\n      setLoading(true);\n      \n      // Use mock data in test mode\n      if (isLocalhost && testModeEnabled) {\n        const mockSessionId = 'test-session-' + Date.now();\n        setCurrentSession({\n          id: mockSessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date(),\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        \n        toast.success('Neural interface activated! Test mode enabled.', {\n          icon: '🤖',\n          duration: 4000,\n        });\n        \n        // Fetch first question\n        await fetchNextQuestion(mockSessionId);\n        \n        return { success: true, sessionId: mockSessionId };\n      }\n      \n      const response = await axios.post('/api/game/start-session', { domain });\n      \n      if (response.data.success) {\n        setCurrentSession({\n          id: response.data.sessionId,\n          domain,\n          questionsAnswered: 0,\n          correctAnswers: 0,\n          startTime: new Date(),\n        });\n        setGameState('playing');\n        setQuestionHistory([]);\n        \n        toast.success(response.data.message, {\n          icon: '🌌',\n          duration: 4000,\n        });\n        \n        // Fetch first question\n        await fetchNextQuestion(response.data.sessionId);\n        \n        return { success: true, sessionId: response.data.sessionId };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to start game session';\n      toast.error(`The ritual failed to begin: ${message}`, {\n        icon: '💀',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchNextQuestion = async (sessionId, filters = {}) => {\n    try {\n      setLoading(true);\n      \n      // Use mock data in test mode\n      if (isLocalhost && testModeEnabled) {\n        const currentQuestionIndex = questionHistory.length;\n        const question = mockQuestions[currentQuestionIndex % mockQuestions.length];\n        \n        setCurrentQuestion({\n          ...question,\n          startTime: new Date(),\n        });\n        \n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        \n        return { success: true, question };\n      }\n      \n      const params = new URLSearchParams(filters).toString();\n      const response = await axios.get(`/api/game/question/${sessionId}?${params}`);\n      \n      if (response.data.success) {\n        setCurrentQuestion({\n          ...response.data.question,\n          cosmicContext: response.data.cosmicContext,\n          startTime: new Date(),\n        });\n        \n        // Set timer for question (2 minutes per question like real exam)\n        setTimeRemaining(120);\n        \n        return { success: true, question: response.data.question };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to fetch question';\n      toast.error(`The cosmic knowledge eludes us: ${message}`, {\n        icon: '🌀',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitAnswer = async (selectedAnswer) => {\n    if (!currentSession || !currentQuestion) return;\n    \n    try {\n      setLoading(true);\n      const timeTaken = Math.floor((new Date() - currentQuestion.startTime) / 1000);\n      \n      // Use mock data in test mode\n      if (isLocalhost && testModeEnabled) {\n        const correct = selectedAnswer === currentQuestion.correctAnswer;\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct,\n          explanation: currentQuestion.explanation,\n          timeTaken,\n          aiResponse: correct ? 'Excellent! Your neural pathways are functioning optimally.' : 'Incorrect. Recalibrating neural matrix...',\n        };\n        \n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n        \n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (correct ? 1 : 0),\n        }));\n        \n        // Show response\n        const toastType = correct ? 'success' : 'error';\n        const toastIcon = correct ? '✨' : '💀';\n        \n        toast[toastType](result.aiResponse, {\n          icon: toastIcon,\n          duration: 4000,\n        });\n        \n        return { success: true, result };\n      }\n      \n      const response = await axios.post('/api/game/answer', {\n        sessionId: currentSession.id,\n        questionId: currentQuestion.id,\n        selectedAnswer,\n        timeTaken,\n      });\n      \n      if (response.data.success) {\n        const result = {\n          questionId: currentQuestion.id,\n          question: currentQuestion.question,\n          selectedAnswer,\n          correct: response.data.correct,\n          explanation: response.data.explanation,\n          timeTaken,\n          cosmicResponse: response.data.cosmicResponse,\n        };\n        \n        // Update question history\n        setQuestionHistory(prev => [...prev, result]);\n        \n        // Update session stats\n        setCurrentSession(prev => ({\n          ...prev,\n          questionsAnswered: prev.questionsAnswered + 1,\n          correctAnswers: prev.correctAnswers + (response.data.correct ? 1 : 0),\n        }));\n        \n        // Update user stats\n        updateUserStats({\n          sanityLevel: (prev) => prev + response.data.sanityChange,\n          knowledgeShards: (prev) => prev + response.data.shardsChange,\n        });\n        \n        // Show cosmic response\n        const toastType = response.data.correct ? 'success' : 'error';\n        const toastIcon = response.data.correct ? '✨' : '💀';\n        \n        toast[toastType](response.data.cosmicResponse, {\n          icon: toastIcon,\n          duration: 4000,\n        });\n        \n        return { success: true, result };\n      }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Failed to submit answer';\n      toast.error(`The cosmic judgment failed: ${message}`, {\n        icon: '💀',\n        duration: 4000,\n      });\n      return { success: false, error: message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const endGameSession = useCallback(() => {\n    if (currentSession) {\n      const endTime = new Date();\n      const duration = Math.floor((endTime - currentSession.startTime) / 1000);\n      \n      setCurrentSession(prev => ({\n        ...prev,\n        endTime,\n        duration,\n      }));\n      \n      setGameState('ended');\n      setCurrentQuestion(null);\n      setTimeRemaining(null);\n      \n      const accuracy = currentSession.questionsAnswered > 0 \n        ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n        : 0;\n      \n      toast.success(`Ritual complete! Accuracy: ${accuracy}%`, {\n        icon: '🌟',\n        duration: 5000,\n      });\n    }\n  }, [currentSession]);\n\n  const pauseGame = () => {\n    setGameState('paused');\n  };\n\n  const resumeGame = () => {\n    setGameState('playing');\n  };\n\n  const resetGame = () => {\n    setCurrentSession(null);\n    setCurrentQuestion(null);\n    setGameState('idle');\n    setQuestionHistory([]);\n    setTimeRemaining(null);\n  };\n\n  const getGameStats = () => {\n    if (!currentSession) return null;\n    \n    const accuracy = currentSession.questionsAnswered > 0 \n      ? (currentSession.correctAnswers / currentSession.questionsAnswered * 100).toFixed(1)\n      : 0;\n    \n    return {\n      questionsAnswered: currentSession.questionsAnswered,\n      correctAnswers: currentSession.correctAnswers,\n      accuracy,\n      duration: currentSession.duration,\n      domain: currentSession.domain,\n    };\n  };\n\n  const value = {\n    currentSession,\n    currentQuestion,\n    gameState,\n    questionHistory,\n    timeRemaining,\n    loading,\n    startGameSession,\n    fetchNextQuestion,\n    submitAnswer,\n    endGameSession,\n    pauseGame,\n    resumeGame,\n    resetGame,\n    getGameStats,\n    setTimeRemaining,\n  };\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}